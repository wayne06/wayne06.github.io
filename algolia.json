[{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/tags/ci/cd/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/ci/cd/","section":"tags","summary":"","tags":null,"title":"CI/CD","type":"tags","url":"/tags/ci/cd/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/tags/devops/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/devops/","section":"tags","summary":"","tags":null,"title":"DevOps","type":"tags","url":"/tags/devops/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/post/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/","section":"post","summary":"","tags":null,"title":"Posts","type":"post","url":"/post/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/tags/saas/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/saas/","section":"tags","summary":"","tags":null,"title":"SaaS","type":"tags","url":"/tags/saas/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/categories/software-development/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/software-development/","section":"categories","summary":"","tags":null,"title":"Software Development","type":"categories","url":"/categories/software-development/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"author":null,"categories":["Software Development"],"content":null,"date":1579229412,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1579229412,"objectID":"cabeb6da777da2a82975f63c8e438713","permalink":"http://example.org/post/the-1st-blog-for-testing/","publishdate":"2020-01-17T10:50:12+08:00","readingtime":1,"relpermalink":"/post/the-1st-blog-for-testing/","section":"post","summary":"Hugo  The world’s fastest framework for building websites.Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.\n Algolia  Deliver what your customers want every time.Algolia’s search-as-a-service and full suite of APIs allow teams to easily develop tailored, fast search and discovery experiences that delight and convert.\n   Static site search with Hugo + Algolia","tags":["DevOps","CI/CD","SaaS"],"title":"The 1st blog for testing","type":"post","url":"/post/the-1st-blog-for-testing/","weight":0,"wordcount":96},{"author":null,"categories":null,"content":null,"date":1579229412,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"home","lang":"en","lastmod":1579229412,"objectID":"","permalink":"http://example.org/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"WZhong","type":"page","url":"/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"46ee40711a4ce38d2bdad430f52d0181","permalink":"http://example.org/post/01-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/01-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82/","section":"post","summary":"学习目标 Dev   掌握微服务架构和前后分离架构设计\n  掌握基于Spring Boot搭建微服务基础框架\n  进一步提升Java/Spring微服务开发技能\n  掌握Spring Boot微服务测试和相关实践\n  理解SaaS多租户应用的架构和设计\n  Ops   理解可运维架构理念和相关实践\n  掌握服务容器化和容器云部署相关实践\n  理解云时代的软件工程流程和实践\n  案例需求：Staffjoy工时排班（Scheduling）SaaS服务 功能  管理员Admin管理公司和排班 雇员Worker管理个人信息  非功能  SaaS + 定制部署 一键部署到Kubernetes容器云 营销和客服友好（Marketing \u0026amp; Customer Friendly）  一些说明 先决条件  应用开发工程师、DevOps工程师、架构师 Java/Spring、Web/HTML/JavaScript、MySQL  开发工具  JDK8 + Maven IntelliJ IDEA MySQL + Workbench Node.js + npm Docker  重点  微服务和云原生架构 Spring Boot + Kubernetes应用  非重点  案例本身 React.","tags":null,"title":"","type":"post","url":"/post/01-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82/","weight":0,"wordcount":61},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c3755c283ad7325c5e6007a177c78863","permalink":"http://example.org/post/02-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E5%9E%8B/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/02-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E5%9E%8B/","section":"post","summary":"系统架构设计和技术栈选型 为何采用微服务架构   观点1：单块优先，再逐块解耦拆分\n  观点2：微服务优先，因微服务技术已逐渐成熟：灵活性、易扩展\n  架构设计和技术栈选型   总体架构设计\n  Skywalking依赖监控图\n  架构设计思想\n 分而治之 单一职责 关注分离    技术栈选型\n 微服务：Spring/Rest 数据访问：Spring Data JPA 数据库：MySQL WWW服务：Spring MVC + Thymeleaf模版引擎 Faraday网关：Spring + Servlet Filter SPA单页应用：React.js + Redux 支持一键部署到本地Docker Compose环境 支持一键部署到Kubernetes容器云环境    SaaS多租户设计\n  数据和接口模型设计   账户服务\n 账户数据模型 账户接口模型    公司服务\n 公司数据模型 实体关系ER图 公司Company服务接口模型 公司管理员Admin服务接口模型 员工目录Directory服务接口模型 团队Team服务接口模型 雇员Worker服务接口模型 任务Job服务接口模型 班次Shift服务接口模型    Dubbo、Spring Cloud和K8s如何选型   微服务公共关注点Common Concerns","tags":null,"title":"","type":"post","url":"/post/02-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E5%9E%8B/","weight":0,"wordcount":209},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"04ba33e37307e0c6be2b3ab9783d1475","permalink":"http://example.org/post/03-%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/03-%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/","section":"post","summary":"服务开发框架设计和实现 Staffjoy项目代码组织   项目代码组织\n  依赖管理\n  微服务为什么采用单体仓库Mono-Repo   Multi-Repo vs Mono-Repo\n  单体仓库优势\n 易于规范代码，标准化依赖管理，易于Code Review，统一代码风格 易于集成和部署 易于开发人员理解项目整体 易于重用代码，易于重构    微服务接口参数校验为何重要   控制器接口参数校验\n javax.validation.constraints内的标注，如@NotBlank、@Min(0)    DTO参数校验\n javax.validation的标注，@Valid DTO类中，各field添加标注，如@NotBlank、@Email    自定义标注\n 自定义@PhoneNumber + 自定义PhoneNumberValidator类(实现ConstraintValidator接口)    如何实现统一异常处理   统一异常处理\n Controller、Service、Repository层发生的异常，都会被RestControolerAdvice机制处理    RestControllerAdvice\n 统一异常处理类GlobalExceptionTranslator使用@RestControllerAdvice标注    统一异常捕获\n 捕获Spring框架本身产生的异常，如MethodArgumentTypeMismatchException 捕获应用自定义异常，如自定义的ServiceException、PermissionDeniedException 捕获不到的异常归入Throwable中，返回INTERNAL_SERVER_ERRO    BaseResponse","tags":null,"title":"","type":"post","url":"/post/03-%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/","weight":0,"wordcount":187},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"dc9998c881c589cd8008211d5f3fb68e","permalink":"http://example.org/post/04-%E5%8F%AF%E7%BC%96%E7%A8%8B%E7%BD%91%E5%85%B3%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/04-%E5%8F%AF%E7%BC%96%E7%A8%8B%E7%BD%91%E5%85%B3%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","section":"post","summary":"可编程网关设计和实践 网关和BFF是如何演化出来的   接入\n 网关即Gateway，是整个微服务的集中入口，是实现前后分离的关键 网关的可编程性对微服务的升级及部署灵活性非常重要 所以需要设计一款轻量级的可编程网关，以应对不断变化的业务需求    网关和BFF(Backend For Frontend)的演化进程\n  MyShop SOA V1，2011年左右\n 外网：浏览器 -\u0026gt; Nginx：反向代理+负载均衡 -\u0026gt; 服务端web应用 -\u0026gt; 微服务：认证、用户、购物车、商品、支付    MyShop SOA V2，2012年，移动端发展\n 移动端 -\u0026gt; Nginx -\u0026gt; 微服务 浏览器 -\u0026gt; Nginx -\u0026gt; 服务端web应用 -\u0026gt; 微服务    MyShop SOA V2.5，移动端添加无线BFF层\n 移动端 -\u0026gt; Nginx -\u0026gt; 无线BFF -\u0026gt; 微服务 浏览器 -\u0026gt; Nginx -\u0026gt; 服务端web应用 -\u0026gt; 微服务    MyShop SOA V3，移动端添加无线网关层","tags":null,"title":"","type":"post","url":"/post/04-%E5%8F%AF%E7%BC%96%E7%A8%8B%E7%BD%91%E5%85%B3%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","weight":0,"wordcount":254},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f91d0e4f7c5b60cf4b27663e1e27df29","permalink":"http://example.org/post/05-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/05-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","section":"post","summary":"安全框架设计和实践 网站安全认证架构演进 ~ 单块阶段   Auth V1 (2006)\n 认证(authentication)和授权(authorization) 登录阶段  传统安全认证基于服务器端session+浏览器端cookie机制实现，会话session是用户登录状态的一种存储机制，http协议本身是无状态的，一个http请求和下一个http请求是相互独立，互不关联 客户端发起Post请求/user/login；通过校验后，服务器向内存中session添加一条记录：sessionId + 对应用户登录信息；然后服务器将登录成功信息返回给客户端浏览器，同时把sessionId以cookie的形式放入客户端浏览器中 session也可存储其他信息，如购物车，相当于用户数据的临时存储   访问阶段  后续访问阶段，浏览器会在后续请求中将sessionId以cookie的方式发送到web服务器端 在操作必须登录的操作时，服务器在收到带sessionId的请求后，在内存session表中进行比对，若能匹配上，说明用户已经登录认证过，服务器就可以提取用户信息，进行下一步操作；也可以在进行操作前，服务器可以根据用户信息中的角色等信息进行鉴权，判断用户是否有足够权限进行操作   Spring Security以SecurityFilter机制来实现安全认证    Auth V1.1 ~ Sticky Session\n V1版本无法应对服务器集群方式部署的情况，导致session只存在于一台服务器 解决方案：Sticky Session，即将用户会话粘在一台服务器上  通过负载均衡器截获并记录sessionId和后台服务器ip的关联信息，请求转发时通过关联信息来做转发，保证在一个会话期间，用户请求和某台服务器绑定 Nginx配置即可   问题：  若需要对服务器正常升级部署，或服务器本身出现延迟或宕机，一拨用户的会话会瞬间消失，用户体验差；又如一部分固定用户反馈网站反应慢 扩展性差。粘性会话在负载均衡器和web服务器都保存了状态，整体是有状态架构，随着流量增长，会话对web服务器和负载均衡器都带来了压力，有状态系统难以扩展   解决方案：  会话同步复制：会话数据在服务器间同步复制；服务器间需要复杂的状态同步协议，整体性能和扩展性变低 无状态会话：会话数据不存在服务器，而存在客户端浏览器；通过请求响应循环捎带来传递用户数据；有泄漏风险，需要加密；浏览器对cookie大小有限制，一般4kb，不能存放较大的会话数据 集中状态会话      Auth V1.5 ~ Centralized Session (2009)\n 将会话数据在专门的服务器上集中存储 会话数据存取性能要求较高，业界一般采用redis这种高性能缓存来做 负载均衡器和服务器都可以水平扩展，集中会话服务器扩展也有很多方案，如redis集群；所以这种方案是高性能、易扩展的解决方案    网站安全认证架构演进 ~ 微服务阶段   微服务认证授权挑战 (2014)","tags":null,"title":"","type":"post","url":"/post/05-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","weight":0,"wordcount":248},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"85015c5dfb91bba36d04e85a98273ee0","permalink":"http://example.org/post/06-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/post/06-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","section":"post","summary":"微服务测试设计和实践  微服务测试的最大挑战：依赖。解决方案是采用分而治之的策略：a.先针对每一个微服务进行隔离测试，在对每一个微服务进行测试的时候再按照分层的方式进行隔离测试；测试过程中采用mock等技术来隔离依赖简化测试；b.在确保每个微服务通过隔离测试后，再进行整个应用的端到端集成测试\n 微服务测试分类和技术   Spring(Boot)应用分层\n controller  服务的对外接口层，负责接收请求和发送响应 中间涉及到消息，一般是json跟对象间的转换，术语叫做序列化，一般由框架封装 控制器需要对输入数据进行校验，由开发人员定制 控制器一般不包含业务逻辑，而是将业务逻辑代理给服务层去做   service + domain  相互配合，共同实现服务的业务逻辑 两种做法：一是业务逻辑主要包含在领域对象内，服务层是领域对象的协调器，称为胖领域模型；一是业务逻辑主要包含在服务层，领域对象除了状态字段基本不包含业务逻辑，称为瘦领域模型   proxy  微服务一般不孤立存在，而是会和其他服务协作实现功能，这时服务会通过服务代理proxy去访问其他服务 服务代理其实就是目标服务的一个客户端；如果采用feign这样的框架，可以实现基于接口代理直接访问目标服务，背后是采用反射+httpClient操作的方式来实现   repository  封装领域对象的数据库存取逻辑，底层基于ORM框架，如hibernate、mybatis；hibernate相对较重，抽象层次较高；mybatis相对轻量、灵活 领域驱动设计(DDD)中的一种数据访问设计模式 在spring data中，直接支持基于repository接口的抽象数据访问层，背后是通过接口反射+调用ORM操作数据库   重点  每个层次及层次间的交互是测试需要覆盖的重点 持久层和服务代理层，涉及到跨越网络边界的调用，较容易出问题 控制器是对外的接口，对入参的校验也特别需要关注      单元测试(Unit Test)：最细粒度的测试\n 工作在方法、类、若干个协作类级别 单元测试的点：  controller层的测试：入参校验、错误处理逻辑；spring提供MockMVC机制，方便对控制器进行单元测试；对于涉及service层的调用，或proxy调用的地方，采用mock进行隔离 service和domain的测试：如果有业务规则逻辑计算，需进行充分的单元测试，保证业务逻辑规则的正确性；对于涉及repository层的调用，或proxy调用的地方，采用mock进行隔离 repository层的测试：repository层涉及领域对象的存储和修改，是微服务应用的底层基础，为了保证数据存取逻辑的正确性，repository层需要充分的测试；因为持久层涉及和数据库进行跨进程网络的交互，为了方便单元测试，在单元测试时使用嵌入式内存数据库，通过隔离外部依赖，让测试做到自包含，这样单元测试更稳定，反馈周期更快；比如在spring进行单元测试时，可使用H2内存数据库暂时替代外部数据库 对于proxy层，基本是目标服务的接口，没有特别的业务逻辑，没有必要进行单元测试；对于设计底层通讯和错误处理的部分，由集成测试进行覆盖 对于微服务中抽取出来的公共类，由于逻辑相对独立，适合充分的单元测试   工具：  junit mockito spring提供的MockMVC、@SpringBootTest   单元测试即使有充分的覆盖度，最多也只能保证每个层次独立工作的正确性，不能保证层次间协作逻辑的正确性，更不能保证系统工作的正确性    集成测试(Integration Test)","tags":null,"title":"","type":"post","url":"/post/06-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","weight":0,"wordcount":760},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1d870ec5139d9fe51f425397377348ed","permalink":"http://example.org/post/07-%E5%8F%AF%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/07-%E5%8F%AF%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","section":"post","summary":"可运维架构设计和实践  架构的可运维性主要和配置、监控(日志，调用链，metrics，告警)、部署相关\n 何谓生产就绪 Production Ready   经典软件工程阶段\n 需求分析 -\u0026gt; 架构设计 -\u0026gt; 实现测试 -\u0026gt; 部署运维    互联网软件交付阶段\n 编码完成 -\u0026gt; 生产就绪 -\u0026gt; 价值交付    何谓生产就绪\n 功能测试OK 性能测试OK 配置管理 日志监控 Metrics监控：调用树，调用延迟，出错树 健康检查 调用链监控 安全性考量 高可用考量 扩展升级考量    Spring Boot如何实现分环境配置   Staffjoy环境\n Dev：IntelliJ IDEA TEST：Docker Compose UAT/PROD：K8s    示例：accountService\n resources下有5个yml配置文件，利用spring profile机制实现  公共配置文件：application.yml 分环境配置文件：application-dev.yml，application-test.yml，application-uat.yml，application-prod.yml      配置管理：Apollo vs.","tags":null,"title":"","type":"post","url":"/post/07-%E5%8F%AF%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E8%B7%B5/","weight":0,"wordcount":405},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"03d259b3c1c2876a2160b34f0823600a","permalink":"http://example.org/post/08-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%8C%96%E5%92%8Cdocker-compose%E9%83%A8%E7%BD%B2/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/post/08-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%8C%96%E5%92%8Cdocker-compose%E9%83%A8%E7%BD%B2/","section":"post","summary":"服务容器化和Docker Compose部署  在面对复杂的分布式微服务应用时，传统的手工的基于物理机或虚拟机的部署方式效率低下且容易出错；Docker容器技术的出现，提供了一种可靠的打包和交付微服务的机制；另外向K8s这样的容器云平台的引入，可以进一步简化分布式微服务的部署和管理；通过K8s可以做到一键部署整个微服务应用，也可以一键扩容微服务应用；因此业界开始提出云原生Cloud Native架构理念，也就是说应用开发不仅要用微服务的方式组织架构，而且在架构上一开始就要考虑直接面向容器云环境部署。微服务架构和云原生架构相辅相成，微服务若离开了容器或容器云，部署和运维效率就会大打折扣\n 本地开发部署架构和需求   本地IDE部署架构\n 各服务对应不同端口    软件需求\n SwitchHosts SkyWalking 6.1.0：配置agent.service_name、collector.backend_service MySQL 5.7 阿里云邮箱账户：用于校验功能    手工服务部署和测试   部署步骤\n  清理释放内存\n 活动监控器 关闭Docker等大进程    部署数据库\n staffjoy_account staffjoy_company    部署SkyWalking\n bin/startup.sh(字节码注入的方式运行) IDE设置skywalking-agent  VM options: -javaagent:D:\\apache-skywalking-apm-bin\\agent Environment variables: SW_AGENT_NAME:account-svc      部署服务\n 本地机密数据配置  config/*.yml   faraday网关配置review  mappings:\r-\rname: faraday_route\r host: faraday.","tags":null,"title":"","type":"post","url":"/post/08-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%8C%96%E5%92%8Cdocker-compose%E9%83%A8%E7%BD%B2/","weight":0,"wordcount":587},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"0150678e4b2103748f07122c947457b9","permalink":"http://example.org/post/09-%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E5%92%8Ckubernetes%E5%AE%B9%E5%99%A8%E4%BA%91%E9%83%A8%E7%BD%B2/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/post/09-%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E5%92%8Ckubernetes%E5%AE%B9%E5%99%A8%E4%BA%91%E9%83%A8%E7%BD%B2/","section":"post","summary":"云原生架构和Kubernetes容器云部署 到底什么是云原生架构   云原生应用定义\n 软件开发行业，早前从XP(ExtremeProgramming)极限编程、敏捷Agile、DevOps等，没有明确定义，是业界最佳实践的一些统称 Applications adoptiong the principles of Microservices packaged as Containers orchestracted by Platforms running on top of Cloud infrastructure, developed using practices such as Continous Delivery and DevOps. 基于微服务原理开发的应用，以容器方式打包；在运行时，容器由运行于云基础设施之上的平台进行调度；应用开发采用持续交付和DevOps实践    云演进史\n Non-Virtualized：企业计算一般直接采用硬件服务器，如sun提供的中高端企业计算服务器 Virtualization：可以用软件方式按需创建虚拟机 IaaS(Infrastructure as a Service)：基础设施即服务，把计算、网络、存储封装成可以按需使用的资源，amazon将其商业化，退出了AWS公有云 PaaS(Platform as a Service)：平台即服务，比IaaS的抽象层次更高，IaaS主要面向计算、网络、存储这些计算资源，PaaS是一个应用的运行时平台，用户在PaaS平台上可直接部署应用，不需要关心底层的计算资源；HEROKU可认为是现代云原生平台的鼻祖或原型 Open Souce IaaS：开源IaaS产品，标志性的就是Openstack，它满足中大型企业自建私有云的需求 Open Souce PaaS：开源PaaS产品，标志性的就是Cloud Foundry，后被Pivotal收购 Containers：颠覆式的Docker容器技术出现，从开始就走开源路线，使得容器技术在行业内快速普及 Cloud Native：随着Docker和K8s的快速普及，大厂开始了立标准的过程，成立了CNCF组织，专门推动云原生项目的治理、推广和应用，标志着计算进入了云原生时代     2000 2001 2006 2009 2010 2011 2013 2015     Sun vmware amazon HEROKU openstack CLOUD FOUNDRY docker CLOUD NATIVE   Non-Virtualized Hardware Virtualization IaaS PaaS Open Source IaaS Open Source PaaS Containers Cloud Native      CNCF - Cloud Native Computing Foundation","tags":null,"title":"","type":"post","url":"/post/09-%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E5%92%8Ckubernetes%E5%AE%B9%E5%99%A8%E4%BA%91%E9%83%A8%E7%BD%B2/","weight":0,"wordcount":659},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7432edc00a1b94252eb048d44e48f6e2","permalink":"http://example.org/post/10-%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/10-%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/","section":"post","summary":"项目复盘、扩展和应用 项目复盘   目标复盘 之 Dev\n  掌握微服务架构和前后端架构设计\n  第二章分析了整体架构设计：在实践中，可根据实际业务需求，采用微服务架构思想，首相将业务领域划分出多个微服务，然后再设计并给出整体应用的架构；第二章中还对dubbo、spring cloud、kubernetes这些主流微服务开发框架和平台进行了全面的比对，以作出合理的技术栈选型，为进一步开发微服务打下平台和框架基础\n  前后分离架构主要是由网关+安全框架配合实现，在第四、五章单独分析了\n    掌握基于Spring Boot搭建微服务基础框架\n  Spring Boot是业界微服务开发的主流框架之一，但是真正开发生产级微服务之前，仍需要对Spring Boot进行一些必要的封装，以适应业务和架构需求；这些封装沉淀下来，就是一个企业的微服务基础框架，标准化和重用这个框架可大大提升后续开发微服务的效率\n  基础框架主要包括服务开发框架、网关、安全认证框架；第三章介绍了如何在Spring Boot基础上做一些轻量级的封装，并将这些封装作为后续开发微服务应用的开发框架；第四章先介绍了微服务网关是如何演化出来的，再剖析了一个最简网关faraday的架构设计和实现；第五章介绍了安全认证架构从单块到微服务的演进历史，再剖析了微服务的安全认证框架的设计细节。完全理解第三、四、五章，就具备了开发微服务基础框架的能力\n    进一步提升Java/Spring微服务开发技能\n  Java/Spring是软件开发的绝对主流\n  第三章介绍了如何在Spring Boot基础上做一些封装使其成为一个微服务开发的基础框架；第六章演示了如何使用Spring提供的测试支持，对微服务进行单元、组件、集成测试等；第十一章对Spring Boot开发的微服务做了全面的剖析\n    掌握Spring Boot微服务测试和相关实践\n  微服务测试的一般性方法，采用分而治之的策略，先对每个微服务进行测试，测试时按照分层的方式进行隔离测试，测试过程中采用mock等技术手段隔离依赖，以简化测试；每个微服务都通过测试后，再进行整个应用的集成测试\n  第六章对Spring微服务应用的测试方法进行了分类，案例说明单元、组件、集成测试的方法，也介绍了测试最佳实践和常用工具\n    理解SaaS多租户应用的架构和设计\n  SaaS应用不同于一般应用，需要支持多租户和租户隔离，案例中采用的方案是：由包括数据库层、安全框架、网关层多个层次配合实现\n  案例采用共享数据库表的逻辑隔离机制，实际企业中的SaaS项目可能需要更强的隔离性，可考虑表隔离、数据库隔离等物理隔离机制\n      目标复盘 之 Ops","tags":null,"title":"","type":"post","url":"/post/10-%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/","weight":0,"wordcount":85},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"eb3e7bdf35b9d37182bf194d263ae635","permalink":"http://example.org/post/11-staffjoy%E9%A1%B9%E7%9B%AE%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/11-staffjoy%E9%A1%B9%E7%9B%AE%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/","section":"post","summary":"源代码解析 Code Review   服务API客户端\n  服务实现端\n POM Configuration \u0026amp; Properties DB Schema Model + Repository Service Controller Main App 接口样例    项目架构 Account服务  服务接口  Company服务  Shift服务接口  Mail、SMS和Bot服务 Faraday网关服务  Faraday网关内核  WhoAmI服务  Intercom客服系统集成  WWW服务   注册激活流程\n  Auth ~ 登录认证阶段\n  登录流程\n  MyAccount \u0026amp; App单页应用   ReactJS架构\n  Why Redux\n  Redux架构","tags":null,"title":"","type":"post","url":"/post/11-staffjoy%E9%A1%B9%E7%9B%AE%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/","weight":0,"wordcount":43},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"http://example.org/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"http://example.org/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/top/about/","section":"top","summary":"Huabing Zhao is an ICT veteran with a passion for open source. He has a solid experience in the telecommunication and information technology industry for more than 17 years.\nThroughout his career, he has built a number of large-scale, cross-country OSS/BSS platforms/systems and operation tools, most of them are still running in productions.\nHe loves open source and has been contributing to a variety of open source projects, including Istio(Service Mesh https://istio.","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":250},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"54ccacff97b96806d49760361ef17350","permalink":"http://example.org/top/books/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/books/","section":"top","summary":"Machine learning学习笔记 Coursera 在线课程 Machine learning 笔记讲师: 吴恩达(Andrew Ng) 课程地址：https://www.","tags":null,"title":"","type":"top","url":"/top/books/","weight":0,"wordcount":10},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"http://example.org/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/","section":"search","summary":"","tags":null,"title":"Searches","type":"search","url":"/search/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"http://example.org/top/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/","section":"top","summary":"","tags":null,"title":"Tops","type":"top","url":"/top/","weight":0,"wordcount":0}]